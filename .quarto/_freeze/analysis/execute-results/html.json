{
  "hash": "65468235277fda82a5c879b258ac7f54",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Analysis\"\n---\n\n\n\nPlease navigate to another page using the toolbar above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(renv)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'renv' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'renv'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    embed, update\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:utils':\n\n    history, upgrade\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    autoload, load, remove\n```\n\n\n:::\n\n```{.r .cell-code}\ninstall(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe following package(s) will be installed:\n- tidyverse [2.0.0]\nThese packages will be installed into \"~/GitHub/Patch-2024/renv/library/R-4.3/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing tidyverse ...                      OK [linked from cache]\nSuccessfully installed 1 package in 40 milliseconds.\n```\n\n\n:::\n\n```{.r .cell-code}\ninstall(\"sf\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe following package(s) will be installed:\n- sf [1.0-19]\nThese packages will be installed into \"~/GitHub/Patch-2024/renv/library/R-4.3/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing sf ...                             OK [linked from cache]\nSuccessfully installed 1 package in 34 milliseconds.\n```\n\n\n:::\n\n```{.r .cell-code}\ninstall(\"CornellLabofOrnithology/auk\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- GitHub authentication credentials are not available.\n- Please set GITHUB_PAT, or ensure the 'gitcreds' package is installed.\n- See https://usethis.r-lib.org/articles/git-credentials.html for more details.\nThe following package(s) will be installed:\n- auk [CornellLabofOrnithology/auk]\nThese packages will be installed into \"~/GitHub/Patch-2024/renv/library/R-4.3/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing auk ...                            OK [linked from cache]\nSuccessfully installed 1 package in 36 milliseconds.\n```\n\n\n:::\n\n```{.r .cell-code}\ninstall(\"DT\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe following package(s) will be installed:\n- DT [0.33]\nThese packages will be installed into \"~/GitHub/Patch-2024/renv/library/R-4.3/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing DT ...                             OK [linked from cache]\nSuccessfully installed 1 package in 38 milliseconds.\n```\n\n\n:::\n\n```{.r .cell-code}\ninstall(\"cowplot\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe following package(s) will be installed:\n- cowplot [1.1.3]\nThese packages will be installed into \"~/GitHub/Patch-2024/renv/library/R-4.3/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing cowplot ...                        OK [linked from cache]\nSuccessfully installed 1 package in 36 milliseconds.\n```\n\n\n:::\n\n```{.r .cell-code}\ninstall(\"mapview\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe following package(s) will be installed:\n- mapview [2.11.2]\nThese packages will be installed into \"~/GitHub/Patch-2024/renv/library/R-4.3/x86_64-w64-mingw32\".\n\n# Installing packages --------------------------------------------------------\n- Installing mapview ...                        OK [linked from cache]\nSuccessfully installed 1 package in 41 milliseconds.\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ purrr::modify() masks renv::modify()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.2, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(auk)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nauk 0.8.0 is designed for EBD files downloaded after 2024-10-29. \nEBD data directory:  G:/Data/eBird/World \neBird taxonomy version:  2024\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(DT)\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mapview)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalities <- read_sf(\"data/raw/pub_commcnc.shp\")\npatch_boundary <- localities %>% \n  filter(cc_name == \"Royal Burgh of St Andrews\") %>% \n  st_transform(crs = 4326) %>% \n  st_buffer(dist = 10)\n\nebird_raw <- read_csv(\"data/raw/MyEBirdData.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 71908 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): Submission ID, Common Name, Scientific Name, Count, State/Provinc...\ndbl   (8): Taxonomic Order, Latitude, Longitude, Duration (Min), All Obs Rep...\ndate  (1): Date\ntime  (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nebird_patch <- ebird_raw %>% \n  filter(year(Date) == 2024) %>% \n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), crs = 4326, remove = FALSE) %>% \n  filter(as.logical(st_intersects(., patch_boundary))) %>% \n  st_drop_geometry()\n\nwrite_sf(patch_boundary, \"data/patch_boundary.gpkg\")\nwrite_csv(ebird_patch, \"data/patch_observations.csv\")\n\nrm(localities, ebird_raw, ebird_patch)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrollup_key <- ebird_taxonomy %>% \n  mutate(report_as = if_else(category == \"species\", species_code, report_as)) %>% \n  select(taxon_order, report_as) %>% \n  left_join(., \n            ebird_taxonomy %>% \n              select(-taxon_order),\n            by = c(\"report_as\" = \"species_code\"))\n\npatch_observations <- read_csv(\"data/patch_observations.csv\") %>% \n  select(\"checklist_id\" = \"Submission ID\",\n         \"taxon_order\" = \"Taxonomic Order\",\n         \"observation_count\" = \"Count\",\n         \"locality_id\" = \"Location ID\",\n         \"locality\" = \"Location\",\n         \"latitude\" = \"Latitude\",\n         \"longitude\" = \"Longitude\",\n         \"observation_date\" = \"Date\",\n         \"observation_time\" = \"Time\",\n         \"protocol\" = \"Protocol\",\n         \"duration_min\" = \"Duration (Min)\",\n         \"all_observations_reported\" = \"All Obs Reported\",\n         \"effort_distance_km\" = \"Distance Traveled (km)\",\n         \"breeding_code\" = \"Breeding Code\") %>% \n  left_join(., rollup_key, by = \"taxon_order\") %>% \n  drop_na(common_name)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 19186 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (12): Submission ID, Common Name, Scientific Name, State/Province, Coun...\ndbl   (8): Taxonomic Order, Count, Latitude, Longitude, Duration (Min), All ...\nlgl   (1): Area Covered (ha)\ndate  (1): Date\ntime  (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\npatch_list <- patch_observations %>% \n  arrange(observation_date, observation_time, taxon_order) %>% \n  group_by(scientific_name) %>% \n  filter(row_number() == 1) %>% \n  ungroup() %>% \n  mutate(obs_order = row_number()) %>% \n  arrange(taxon_order) %>% \n  mutate(tax_order = row_number()) %>% \n  arrange(observation_date, observation_time, taxon_order) %>% \n  select(obs_order, observation_date, locality, common_name, \n         scientific_name, tax_order, checklist_id) %>% \n  left_join(., ebird_taxonomy %>% \n              select(scientific_name, species_code), \n            by = \"scientific_name\") %>% \n  mutate(ebird_url = paste0(\"https://ebird.org/species/\", \n                      species_code, \"/GB-SCT-FIF\"),\n         link = str_replace_all(tolower(common_name), \" \", \"-\"))\n\nsave(patch_list, file = \"data/patch_list.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatch_months <- reduce(\n  list(\n    patch_observations %>% \n      group_by(month = month(observation_date)) %>% \n      summarise(n_species = n_distinct(common_name)),\n    patch_observations %>% \n      select(-c(taxon_order, observation_count, breeding_code, \n                report_as, scientific_name, common_name, order, family, \n                family_common, category, report_as.y, extinct)) %>% \n      distinct() %>% \n      filter(all_observations_reported == 1) %>% \n      group_by(month = month(observation_date)) %>% \n      summarise(n_completes = n_distinct(checklist_id)),\n    patch_observations %>% \n      select(-c(taxon_order, observation_count, breeding_code, \n                report_as, scientific_name, common_name, order, family, \n                family_common, category, report_as.y, extinct)) %>% \n      distinct() %>% \n      group_by(month = month(observation_date)) %>% \n      summarise(n_days = n_distinct(observation_date),\n                sum_duration = round(sum(duration_min, na.rm = TRUE)/60, 1),\n                sum_distance = round(sum(effort_distance_km, na.rm = TRUE), 1)),\n    patch_list %>% \n      group_by(month = month(observation_date)) %>% \n      summarise(n_additions = n_distinct(common_name))\n  ),\n  left_join\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(month)`\nJoining with `by = join_by(month)`\nJoining with `by = join_by(month)`\n```\n\n\n:::\n\n```{.r .cell-code}\nsave(patch_months, file = \"data/patch_months.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatch_species <- reduce(\n  list(\n    patch_observations %>% \n      group_by(scientific_name, common_name) %>% \n      summarise(taxon_order = min(taxon_order),\n                n_records = n(),\n                n_months = n_distinct(month(observation_date)),\n                n_sites = n_distinct(locality),\n                sum_count = sum(observation_count, na.rm = TRUE),\n                max_count = max(observation_count, na.rm = TRUE)) %>% \n      arrange(taxon_order),\n    patch_observations %>% \n      group_by(scientific_name, common_name) %>% \n      arrange(desc(observation_count)) %>% \n      filter(row_number() == 1) %>% \n      select(scientific_name, common_name, checklist_id),\n    patch_observations %>% \n      mutate(breeding_code = word(breeding_code, 1)) %>% \n      drop_na(breeding_code) %>% \n      filter(breeding_code != \"F\") %>% \n      mutate(breeding_code = factor(breeding_code, levels = c(\n        \"NY\", \"NE\", \"FS\", \"FY\", \"CF\", \"FL\", \"ON\", \"UN\", \"DD\", \"NB\", \"CN\",\n        \"PE\", \"B\", \"A\", \"N\", \"C\", \"T\", \"P\", \"M\", \"S7\", \"S\", \"H\"\n      ))) %>% \n      group_by(scientific_name, common_name) %>% \n      arrange(breeding_code) %>% \n      summarise(breeding_codes = paste(unique(breeding_code), collapse = \", \"))\n  ),\n  left_join\n) %>%\n  mutate(breeding_codes = replace_na(breeding_codes, \"none\"),\n         max_count = as.integer(max_count),\n         sum_count = as.integer(sum_count))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'scientific_name'. You can override using\nthe `.groups` argument.\n`summarise()` has grouped output by 'scientific_name'. You can override using\nthe `.groups` argument.\nJoining with `by = join_by(scientific_name, common_name)`\nJoining with `by = join_by(scientific_name, common_name)`\n```\n\n\n:::\n\n```{.r .cell-code}\nsave(patch_species, file = \"data/patch_species.RData\")  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatch_monthrrs <- patch_observations %>% \n  filter(all_observations_reported == TRUE) %>% \n  group_by(month = month(observation_date)) %>% \n  summarise(n_checklists = n_distinct(checklist_id)) %>% \n  expand_grid(., common_name = unique(patch_observations$common_name)) %>% \n  left_join(., patch_observations %>% \n              group_by(common_name, month = month(observation_date)) %>% \n              summarise(n_obs = n_distinct(checklist_id))) %>% \n  mutate(n_obs = replace_na(n_obs, 0),\n         reporting_rate = n_obs / n_checklists) %>% \n  left_join(., patch_list %>% \n              select(common_name, scientific_name, tax_order)) %>% \n  arrange(tax_order, month) %>% \n  select(common_name, scientific_name, tax_order, month, n_checklists, n_obs, reporting_rate)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'common_name'. You can override using the\n`.groups` argument.\nJoining with `by = join_by(month, common_name)`\nJoining with `by = join_by(common_name)`\n```\n\n\n:::\n\n```{.r .cell-code}\npatch_pulses <- list()\n\nfor (i in 1:nrow(patch_list)) {\n  \n  rrs <- filter(patch_monthrrs, common_name == pull(arrange(patch_list, tax_order), common_name)[i]) %>% \n    mutate(reporting_rate = if_else(reporting_rate > 1, 1, reporting_rate))\n  \n  patch_pulses[[i]] <- ggplot(rrs) +\n    geom_rect(aes(xmin = month - 0.5, xmax = month + 0.5, ymin = -sqrt(reporting_rate), ymax = sqrt(reporting_rate))) +\n    scale_x_continuous(limits = c(0.5, 12.5), expand = c(0, 0), breaks = 1:12, labels = str_sub(month.name, 1, 1)) +\n    scale_y_continuous(limits = c(-1, 1), expand = c(0, 0)) +\n    theme_nothing() +\n    theme(axis.text.x = element_text(size = 10)) +\n    labs(x = NULL, y = NULL)\n  \n  rm(rrs)\n}\n\nsave(patch_pulses, file = \"data/patch_pulses.RData\")  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatch_tracks <- read_sf(\"data/raw/patch_tracks.gpkg\") %>% \n  select(-Name, -Description) %>% \n  full_join(., patch_observations) %>% \n  drop_na(locality) %>%\n  st_intersection(., patch_boundary)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(checklist_id)`\nst_as_s2(): dropping Z and/or M coordinate\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n```{.r .cell-code}\n# add untracked observations as points from locality position\npatch_tracks <- left_join(patch_observations, patch_tracks) %>% \n  filter(is.na(cc_name)) %>% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326, remove = FALSE) %>% \n  select(-geom) %>% \n  rename(geom = geometry) %>% \n  bind_rows(patch_tracks, .)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(checklist_id, taxon_order, observation_count,\nlocality_id, locality, latitude, longitude, observation_date, observation_time,\nprotocol, duration_min, all_observations_reported, effort_distance_km,\nbreeding_code, report_as, scientific_name, common_name, order, family,\nfamily_common, category, report_as.y, extinct)`\n```\n\n\n:::\n\n```{.r .cell-code}\nsave(patch_tracks, file = \"data/patch_tracks.RData\")  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatch_sites <- patch_observations %>% \n  select(checklist_id, locality_id, locality, latitude, longitude, \n         observation_date, observation_time, protocol, duration_min,\n         all_observations_reported, effort_distance_km) %>% \n  distinct() %>% \n  group_by(locality_id, locality, latitude, longitude) %>% \n  summarise(n_checklists = n_distinct(checklist_id),\n            n_months = n_distinct(month(observation_date)),\n            sum_duration = sum(duration_min / 60, na.rm = TRUE),\n            sum_distance = sum(effort_distance_km, na.rm = TRUE)) %>% \n  left_join(., patch_observations %>% \n              group_by(locality_id) %>% \n              summarise(n_species = n_distinct(common_name)),\n            by = \"locality_id\") %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'locality_id', 'locality', 'latitude'. You\ncan override using the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsave(patch_sites, file = \"data/patch_sites.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatch_checklists <- patch_observations %>% \n  arrange(observation_date, observation_time, taxon_order) %>% \n  group_by(checklist_id, observation_date, effort_distance_km, \n           duration_min, locality) %>% \n  summarise(n_species = n_distinct(common_name)) %>% \n  mutate(link = str_replace_all(str_replace_all(tolower(locality), \"[^[:alnum:]| ]\", \"\"), \" \", \"-\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'checklist_id', 'observation_date',\n'effort_distance_km', 'duration_min'. You can override using the `.groups`\nargument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsave(patch_checklists, file = \"data/patch_checklists.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}